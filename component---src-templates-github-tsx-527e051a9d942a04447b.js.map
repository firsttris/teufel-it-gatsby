{"version":3,"sources":["webpack:///./src/components/GithubItem.tsx","webpack:///./src/components/Github.tsx","webpack:///./src/templates/Github.tsx"],"names":["smallStyle","float","width","textAlign","GithubItem","props","react","href","repo","html_url","target","rel","className","name","style","stargazers_count","forks_count","dangerouslySetInnerHTML","__html","toImage","description","language","Github","_React$Component","_this","call","this","onEnter","e","key","document","activeElement","blur","search","event","repos","filter","toLowerCase","includes","value","setState","filteredRepositories","searchInput","reset","state","inheritsLoose_default","prototype","render","backgroundImage","background","FullImage","image","code","height","Header","locale","SectionHeaderWithSubRow","title","text","type","id","placeholder","onChange","onKeyPress","onClick","cursor","aria-hidden","map","repository","index","GithubItem_GithubItem","Contact","Impressum","React","__webpack_exports__","Layout","location","pageContext","Github_Github","data","childImageSharp","fluid","lines","fixed","src","query"],"mappings":"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","file":"component---src-templates-github-tsx-527e051a9d942a04447b.js","sourcesContent":["import { toImage } from 'emojione';\nimport * as React from 'react';\n\nconst smallStyle: React.CSSProperties = { float: 'right', width: '100px', textAlign: 'right' };\n\ninterface Props {\n  repo: any;\n}\n\nexport const GithubItem = (props: Props) => (\n  <div>\n    <a\n      href={props.repo.html_url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">{props.repo.name}</h5>\n      </div>\n      <small style={smallStyle}>\n        <i className=\"fas fa-star mx-1\" />\n        <span className=\"pr-2\">{props.repo.stargazers_count}</span>\n        <i className=\"fas fa-code-branch mx-1\" />\n        <span>{props.repo.forks_count}</span>\n      </small>\n      <div className=\"mb-1\" dangerouslySetInnerHTML={{ __html: toImage(props.repo.description || '') }} />\n      <small>{props.repo.language}</small>\n    </a>\n  </div>\n);\n","import { FixedObject } from 'gatsby-image';\nimport * as React from 'react';\nimport { Contact } from './Contact';\nimport { FullImage } from './FullImage';\nimport { GithubItem } from './GithubItem';\nimport { Header } from './Header';\nimport { Impressum } from './Impressum';\nimport { SectionHeaderWithSubRow } from './SectionHeaderWithSubRow';\n\ninterface Props {\n  locale: string;\n  repos: any;\n  background: FixedObject;\n  code: FixedObject;\n}\n\ninterface State {\n  searchInput: string;\n  filteredRepositories: any[];\n}\n\nexport class Github extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      searchInput: '',\n      filteredRepositories: this.props.repos\n    };\n  }\n\n  onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      document.activeElement.blur();\n    }\n  };\n\n  search = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const repos = this.props.repos.filter((repo: any) =>\n      repo.name.toLowerCase().includes(event.target.value.toLowerCase())\n    );\n    this.setState({ filteredRepositories: repos, searchInput: event.target.value });\n  };\n\n  reset = () => {\n    this.setState({ searchInput: '', filteredRepositories: this.props.repos });\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid\" style={{ backgroundImage: `url(${this.props.background})` }}>\n        <div className=\"text-center\">\n          <FullImage image={this.props.code} height=\"550px\" />\n          <Header locale={this.props.locale} />\n        </div>\n        <div className=\"container\">\n          <SectionHeaderWithSubRow title=\"NAVIGATION_PROJECTS\" text=\"GITHUB_SUBTITLE\" locale={this.props.locale} />\n          <div className=\"form-group pt-3\">\n            <div className=\"input-group\">\n              <input\n                type=\"search\"\n                className=\"form-control\"\n                id=\"Search\"\n                placeholder=\"Search\"\n                value={this.state.searchInput}\n                onChange={this.search}\n                onKeyPress={this.onEnter}\n              />\n              <div className=\"input-group-prepend\" onClick={this.reset} style={{ cursor: 'pointer' }}>\n                <div className=\"input-group-text\">\n                  <i className=\"fas fa-trash-alt\" aria-hidden=\"true\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"list-group pb-3\">\n            {this.state.filteredRepositories.map((repository, index) => (\n              <GithubItem key={index} repo={repository} />\n            ))}\n          </div>\n        </div>\n        <Contact locale={this.props.locale} />\n        <Impressum locale={this.props.locale} />\n      </div>\n    );\n  }\n}\n","import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { Github } from './../components/Github';\nimport { Layout } from './../layouts/Layout';\n\ninterface Props {\n  location: Location;\n  data: any;\n  pageContext: {\n    data: any;\n    locale: string;\n  };\n}\n\nexport default (props: Props) => (\n  <Layout location={props.location} locale={props.pageContext.locale}>\n    <Github\n      locale={props.pageContext.locale}\n      repos={props.pageContext.data}\n      code={props.data.code.childImageSharp.fluid}\n      background={props.data.lines.childImageSharp.fixed.src}\n    />\n  </Layout>\n);\n\nexport const query = graphql`\n  query {\n    code: file(relativePath: { eq: \"code.jpg\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    lines: file(relativePath: { eq: \"backgrounds/lines.png\" }) {\n      childImageSharp {\n        fixed(quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}